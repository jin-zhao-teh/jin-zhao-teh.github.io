<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fusion Reactor Simulation</title>
    <script src="https://cdn.plot.ly/plotly-2.24.1.min.js"></script>
    <style>
        :root {
            --primary: #2c3e50;
            --secondary: #3498db;
            --accent: #e74c3c;
            --background: #f5f7fa;
            --card-bg: #ffffff;
            --text: #333333;
            --border: #e0e0e0;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--background);
            color: var(--text);
            line-height: 1.6;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            background: linear-gradient(135deg, var(--primary), #1a2530);
            color: white;
            padding: 20px 0;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        
        h1 {
            margin: 0;
            font-size: 2.5rem;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            max-width: 800px;
            margin: 10px auto 0;
        }
        
        .tabs {
            display: flex;
            background: var(--card-bg);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            margin-bottom: 25px;
        }
        
        .tab-btn {
            flex: 1;
            padding: 15px 20px;
            background: none;
            border: none;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            color: var(--text);
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }
        
        .tab-btn.active {
            background: rgba(52, 152, 219, 0.1);
            color: var(--secondary);
            border-bottom: 3px solid var(--secondary);
        }
        
        .tab-btn:hover:not(.active) {
            background: rgba(52, 152, 219, 0.05);
        }
        
        .tab-content {
            display: none;
            background: var(--card-bg);
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .plot-container {
            height: 500px;
            margin-bottom: 25px;
            border-radius: 8px;
            overflow: hidden;
            background: white;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }
        
        .controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        .control-group {
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(52, 152, 219, 0.1);
            padding: 10px 15px;
            border-radius: 8px;
        }
        
        .control-group label {
            font-weight: 600;
            color: var(--secondary);
        }
        
        .device-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 25px;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }
        
        .device-table th {
            background: var(--primary);
            color: white;
            padding: 15px;
            text-align: left;
        }
        
        .device-table td {
            padding: 12px 15px;
            border-bottom: 1px solid var(--border);
        }
        
        .device-table tr:last-child td {
            border-bottom: none;
        }
        
        .device-table tr:hover {
            background: rgba(52, 152, 219, 0.05);
        }
        
        .color-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }
        
        .btn {
            background: var(--secondary);
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: background 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn:hover {
            background: #2980b9;
        }
        
        .btn.btn-danger {
            background: var(--accent);
        }
        
        .btn.btn-danger:hover {
            background: #c0392b;
        }
        
        .simulation-controls {
            display: flex;
            gap: 15px;
            margin: 20px 0;
        }
        
        .info-panel {
            background: rgba(52, 152, 219, 0.1);
            padding: 20px;
            border-radius: 8px;
            margin: 25px 0;
            border-left: 4px solid var(--secondary);
        }
        
        .physics-formulas {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 25px 0;
        }
        
        .formula-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.05);
        }
        
        .formula-card h3 {
            margin-top: 0;
            color: var(--secondary);
            border-bottom: 2px solid var(--border);
            padding-bottom: 10px;
        }
        
        .formula {
            font-family: monospace;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin: 15px 0;
            font-size: 1.1rem;
            overflow-x: auto;
        }
        
        .device-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-top: 20px;
        }
        
        .device-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            border-top: 4px solid var(--secondary);
        }
        
        .device-card h3 {
            margin-top: 0;
            color: var(--primary);
        }
        
        .param-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid var(--border);
        }
        
        .param-row:last-child {
            border-bottom: none;
        }
        
        .param-label {
            font-weight: 600;
        }
        
        @media (max-width: 768px) {
            .tabs {
                flex-direction: column;
            }
            
            .controls {
                flex-direction: column;
            }
            
            .control-group {
                width: 100%;
            }
            
            .simulation-controls {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <h1>Fusion Reactor Simulation</h1>
            <p class="subtitle">Interactive simulation of fusion reactor performance across various devices with real-time plasma physics modeling</p>
        </div>
    </header>
    
    <div class="container">
        <div class="tabs">
            <button class="tab-btn active" data-tab="home">Fusion Power</button>
            <button class="tab-btn" data-tab="evolution">Core/Edge Evolution</button>
            <button class="tab-btn" data-tab="profiles">Radial Profiles</button>
            <button class="tab-btn" data-tab="physics">Physics Models</button>
            <button class="tab-btn" data-tab="devices">Device Parameters</button>
        </div>
        
        <!-- Home Tab: Fusion Power -->
        <div id="home" class="tab-content active">
            <h2>Fusion Power Output</h2>
            <p>Real-time comparison of fusion power generation across different reactor designs.</p>
            
            <div class="controls">
                <div class="control-group">
                    <input type="checkbox" id="showAvg" checked>
                    <label for="showAvg">Show 10s Rolling Average</label>
                </div>
                <div class="control-group">
                    <input type="checkbox" id="logScale" checked>
                    <label for="logScale">Logarithmic Y-Axis</label>
                </div>
            </div>
            
            <div class="plot-container" id="fusionPowerPlot"></div>
            
            <table class="device-table">
                <thead>
                    <tr>
                        <th>Device</th>
                        <th>Current Power (W)</th>
                        <th>Avg (10s) (W)</th>
                        <th>Total Energy (J)</th>
                    </tr>
                </thead>
                <tbody id="deviceTableBody">
                    <!-- Filled by JavaScript -->
                </tbody>
            </table>
            
            <div class="simulation-controls">
                <button id="startBtn" class="btn">
                    <i class="fas fa-play"></i> Start Simulation
                </button>
                <button id="pauseBtn" class="btn">
                    <i class="fas fa-pause"></i> Pause
                </button>
                <button id="resetBtn" class="btn btn-danger">
                    <i class="fas fa-redo"></i> Reset
                </button>
            </div>
        </div>
        
        <!-- Evolution Tab -->
        <div id="evolution" class="tab-content">
            <h2>Central vs. Edge Plasma Evolution</h2>
            <p>Comparison of core and edge plasma parameters over time.</p>
            
            <div class="plot-container" id="tempEvolutionPlot"></div>
            <div class="plot-container" id="densityEvolutionPlot"></div>
        </div>
        
        <!-- Profiles Tab -->
        <div id="profiles" class="tab-content">
            <h2>Radial Profiles</h2>
            <p>Final radial profiles of plasma temperature and density.</p>
            
            <div class="plot-container" id="tempProfilePlot"></div>
            <div class="plot-container" id="densityProfilePlot"></div>
        </div>
        
        <!-- Physics Models Tab -->
        <div id="physics" class="tab-content">
            <h2>Physics Models</h2>
            <p>Equations and formulas used in the simulation.</p>
            
            <div class="info-panel">
                <p>This simulation models fusion reactor physics using the following equations:</p>
                <ul>
                    <li>Fusion reaction rates for DT, DHe3, and DD fuels</li>
                    <li>Bremsstrahlung and line radiation losses</li>
                    <li>Gyro-Bohm diffusion transport model</li>
                    <li>Energy balance with alpha particle heating</li>
                </ul>
            </div>
            
            <div class="physics-formulas">
                <div class="formula-card">
                    <h3>Fusion Cross Section</h3>
                    <p>For DT fuel:</p>
                    <div class="formula">σv = 3.68e-18 * (T/17.6)<sup>0.3</sup> * exp(-(T/69)<sup>0.8</sup>)</div>
                    
                    <p>For DHe3 fuel:</p>
                    <div class="formula">σv = 2.5e-21 * T<sup>-2/3</sup> * exp(-18.8 * T<sup>-1/3</sup>)</div>
                </div>
                
                <div class="formula-card">
                    <h3>Radiation Losses</h3>
                    <p>Bremsstrahlung radiation:</p>
                    <div class="formula">P<sub>brem</sub> = 1.69e-38 * Z<sub>eff</sub> * n² * √T</div>
                    
                    <p>Line radiation:</p>
                    <div class="formula">P<sub>line</sub> = 1e-37 * Z<sub>imp</sub>² * f<sub>imp</sub> * n² * exp(-T/10)</div>
                </div>
                
                <div class="formula-card">
                    <h3>Transport Model</h3>
                    <p>Gyro-Bohm diffusion coefficient:</p>
                    <div class="formula">D = 0.1 * T<sup>1.5</sup> / B</div>
                    
                    <p>Where:</p>
                    <ul>
                        <li>T = Temperature (keV)</li>
                        <li>B = Magnetic field (T)</li>
                        <li>n = Density (m⁻³)</li>
                        <li>Z<sub>eff</sub> = Effective charge</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <!-- Devices Tab -->
        <div id="devices" class="tab-content">
            <h2>Device Parameters</h2>
            <p>Configuration of all simulated fusion devices.</p>
            
            <div class="device-grid" id="deviceCards">
                <!-- Filled by JavaScript -->
            </div>
        </div>
    </div>

    <script>
        // Constants
        const keV_to_J = 1.602e-16;
        const e = 1.602e-19;
        const mu0 = 4 * Math.PI * 1e-7;
        
        // Device parameters
        const devices = {
            "Tokamak": {
                "n0": 5e19, "T0": 10, "V": 100, "fuel": "DT", "I_p": 1e6, "B0": 5, "R": 2, "a": 0.5,
                "kappa": 1.7, "H_98": 1.0, "impurity": "C", "Z_imp": 6, "Z_eff": 1.5, "impurity_frac": 0.01,
                "color": "#1f77b4"
            },
            "ITER": {
                "n0": 1e20, "T0": 20, "V": 840, "fuel": "DT", "I_p": 1.5e6, "B0": 5.3, "R": 6.2, "a": 2,
                "kappa": 1.7, "H_98": 1.0, "impurity": "W", "Z_imp": 74, "Z_eff": 1.5, "impurity_frac": 0.01,
                "color": "#ff7f0e"
            },
            "Polaris": {
                "n0": 5e22, "T0": 20, "V": 0.5, "fuel": "DHe3", "I_p": 0, "B0": 10, "R": 0.5, "a": 0.1,
                "kappa": 1.0, "H_98": 1.0, "impurity": "C", "Z_imp": 6, "Z_eff": 2.0, "impurity_frac": 0.02,
                "color": "#2ca02c"
            },
            "LDX Junior": {
                "n0": 1e19, "T0": 1, "V": 0.014, "fuel": "DD", "I_p": 0, "B0": 0.5, "R": 0.2, "a": 0.05,
                "kappa": 1.0, "H_98": 1.0, "impurity": "C", "Z_imp": 6, "Z_eff": 1.2, "impurity_frac": 0.005,
                "color": "#d62728"
            },
            "Stellarator": {
                "n0": 2e19, "T0": 8, "V": 30, "fuel": "DT", "I_p": 0, "B0": 3, "R": 1.5, "a": 0.4,
                "kappa": 1.7, "H_98": 1.0, "impurity": "C", "Z_imp": 6, "Z_eff": 1.3, "impurity_frac": 0.008,
                "color": "#9467bd"
            },
            "Z-pinch": {
                "n0": 1e21, "T0": 5, "V": 0.01, "fuel": "DT", "I_p": 2e6, "B0": 20, "R": 0.01, "a": 0.005,
                "kappa": 1.0, "H_98": 1.0, "impurity": "C", "Z_imp": 6, "Z_eff": 1.7, "impurity_frac": 0.03,
                "color": "#8c564b"
            },
            "ICF": {
                "n0": 1e26, "T0": 10, "V": 1e-9, "fuel": "DT", "I_p": 0, "B0": 0, "R": 0.001, "a": 0.0005,
                "kappa": 1.0, "H_98": 1.0, "impurity": "C", "Z_imp": 6, "Z_eff": 1.1, "impurity_frac": 0.001,
                "color": "#e377c2"
            }
        };
        
        // Physics functions
        function sigma_v(T, fuel) {
            T = Math.max(T, 0.1);
            if (fuel === "DT") {
                const exponent = -Math.pow(T / 69, 0.8);
                return 3.68e-18 * Math.pow(T / 17.6, 0.3) * Math.exp(exponent);
            } else if (fuel === "DHe3") {
                const exponent = -18.8 * Math.pow(T, -1/3);
                return 2.5e-21 * Math.pow(T, -2/3) * Math.exp(exponent);
            } else if (fuel === "DD") {
                const exponent = -18.76 * Math.pow(T, -1/3);
                return 1.6e-22 * Math.pow(T, -2/3) * Math.exp(exponent);
            }
            return 0.0;
        }
        
        function fusion_energy(fuel) {
            if (fuel === "DT") return 17.6e6 * e;
            if (fuel === "DHe3") return 18.3e6 * e;
            if (fuel === "DD") return 3.65e6 * e;
            return 0.0;
        }
        
        function P_brem(n, T, Z_eff) {
            return 1.69e-38 * Z_eff * n * n * Math.sqrt(T);
        }
        
        function P_line(n, T, Z_imp, impurity_frac) {
            return 1e-37 * Z_imp * Z_imp * impurity_frac * n * n * Math.exp(-T/10);
        }
        
        function D_gyrobohm(T, B) {
            return 0.1 * Math.pow(T, 1.5) / (B + 1e-6);
        }
        
        // Simulation class
        class LiveSim {
            constructor(params) {
                this.params = params;
                this.a = params.a;
                this.R = params.R;
                this.B = params.B0;
                this.fuel = params.fuel;
                this.Z_eff = params.Z_eff;
                this.Z_imp = params.Z_imp;
                this.impurity_frac = params.impurity_frac;
                this.n_r = 30;
                this.dt = 0.1;
                this.r = this.linspace(0, this.a, this.n_r);
                this.dr = this.r[1] - this.r[0];
                
                // Initialize profiles
                this.T = this.r.map(x => params.T0 * (1 - Math.pow(x/this.a, 2) * 0.8));
                this.n = this.r.map(() => params.n0);
                
                // Time evolution tracking
                this.time = [0.0];
                this.T_central = [this.T[0]];
                this.T_edge = [this.T[this.T.length-1]];
                this.n_central = [this.n[0]];
                this.n_edge = [this.n[this.n.length-1]];
                this.P_fusion_total = [0.0];
                this.E_fusion_total = [0.0];
            }
            
            linspace(start, end, count) {
                const step = (end - start) / (count - 1);
                return Array.from({length: count}, (_, i) => start + i * step);
            }
            
            step() {
                const D = this.T.map(t => D_gyrobohm(t, this.B));
                const chi = D.map(d => Math.max(0, Math.min(d, 1e3)));
                const sv = this.T.map(t => sigma_v(t, this.fuel));
                const E_fus = fusion_energy(this.fuel);
                
                let P_fusion;
                let f_alpha;
                if (this.fuel === "DT") {
                    const n_D = this.n.map(n => n / 2);
                    const n_T = [...n_D];
                    P_fusion = n_D.map((nD, i) => nD * n_T[i] * sv[i] * E_fus);
                    f_alpha = 0.2;
                } else {
                    P_fusion = this.n.map((n, i) => 0.25 * n * n * sv[i] * E_fus);
                    f_alpha = 0.0;
                }
                
                // Total power calculation
                const dV = this.r.map(r => 2 * Math.PI * this.R * r * this.dr);
                const powerElements = P_fusion.map((p, i) => p * dV[i]);
                const total_power = powerElements.reduce((sum, val) => sum + val, 0);
                this.P_fusion_total.push(total_power);
                this.E_fusion_total.push(this.E_fusion_total[this.E_fusion_total.length-1] + total_power * this.dt);
                
                const P_alpha = P_fusion.map(p => f_alpha * p);
                const P_aux = 1e7;  // 10 MW auxiliary heating
                
                // Radiation losses
                const P_brem_arr = this.n.map((n, i) => P_brem(n, this.T[i], this.Z_eff));
                const P_line_arr = this.n.map((n, i) => P_line(n, this.T[i], this.Z_imp, this.impurity_frac));
                const P_rad = P_brem_arr.map((p, i) => p + P_line_arr[i]);
                
                // Fueling term
                const fueling = 0.01 * this.params.n0;
                
                // Update density profile
                const n_new = [...this.n];
                for (let i = 1; i < this.n_r-1; i++) {
                    const flux_in = D[i+1] * (this.n[i+1] - this.n[i]) / this.dr;
                    const flux_out = D[i] * (this.n[i] - this.n[i-1]) / this.dr;
                    n_new[i] = this.n[i] + this.dt * ((flux_in - flux_out) / this.dr + fueling);
                }
                n_new[0] = n_new[1];
                n_new[this.n_r-1] = n_new[this.n_r-2];
                
                // Update temperature profile
                const T_new = [...this.T];
                for (let i = 1; i < this.n_r-1; i++) {
                    const heat_in = chi[i+1] * (this.T[i+1] - this.T[i]) / this.dr;
                    const heat_out = chi[i] * (this.T[i] - this.T[i-1]) / this.dr;
                    const heat_source = (P_alpha[i] - P_rad[i] + P_aux) * this.dt / (1.5 * this.n[i] * keV_to_J);
                    T_new[i] = this.T[i] + this.dt * ((heat_in - heat_out) / this.dr + heat_source);
                }
                T_new[0] = T_new[1];
                T_new[this.n_r-1] = T_new[this.n_r-2];
                
                // Apply constraints
                for (let i = 0; i < this.n_r; i++) {
                    T_new[i] = Math.max(1e-3, Math.min(T_new[i], 1e3));
                    n_new[i] = Math.max(1e-10, Math.min(n_new[i], 1e30));
                }
                
                // Update state
                this.n = n_new;
                this.T = T_new;
                this.time.push(this.time[this.time.length-1] + this.dt);
                this.T_central.push(this.T[0]);
                this.T_edge.push(this.T[this.T.length-1]);
                this.n_central.push(this.n[0]);
                this.n_edge.push(this.n[this.n.length-1]);
            }
            
            getResults() {
                return {
                    r: this.r,
                    T: this.T,
                    n: this.n,
                    T_central: [...this.T_central],
                    T_edge: [...this.T_edge],
                    n_central: [...this.n_central],
                    n_edge: [...this.n_edge],
                    P_fusion_total: [...this.P_fusion_total],
                    E_fusion_total: [...this.E_fusion_total],
                    time: [...this.time]
                };
            }
        }
        
        // Initialize simulations
        const sims = {};
        Object.keys(devices).forEach(dev => {
            sims[dev] = new LiveSim(devices[dev]);
        });
        
        // Plot data
        let fusionPowerData = [];
        let tempEvolutionData = [];
        let densityEvolutionData = [];
        let tempProfileData = [];
        let densityProfileData = [];
        
        // Initialize plots
        function initPlots() {
            // Fusion power plot
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                const color = devices[dev].color;
                
                fusionPowerData.push({
                    x: res.time,
                    y: res.P_fusion_total,
                    name: dev,
                    mode: 'lines',
                    line: {color: color, width: 1},
                    opacity: 0.4
                });
                
                fusionPowerData.push({
                    x: res.time,
                    y: res.P_fusion_total,
                    name: `${dev} (avg)`,
                    mode: 'lines',
                    line: {color: color, width: 2},
                    visible: true
                });
            });
            
            Plotly.newPlot('fusionPowerPlot', fusionPowerData, {
                title: 'Total Fusion Power Output vs Time',
                xaxis: {title: 'Time (s)'},
                yaxis: {title: 'Fusion Power (W)', type: 'log'},
                showlegend: true,
                legend: {x: 1.05, y: 1}
            });
            
            // Temperature evolution plot
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                const color = devices[dev].color;
                
                tempEvolutionData.push({
                    x: res.time,
                    y: res.T_central,
                    name: `${dev} (center)`,
                    mode: 'lines',
                    line: {color: color}
                });
                
                tempEvolutionData.push({
                    x: res.time,
                    y: res.T_edge,
                    name: `${dev} (edge)`,
                    mode: 'lines',
                    line: {color: color, dash: 'dash'}
                });
            });
            
            Plotly.newPlot('tempEvolutionPlot', tempEvolutionData, {
                title: 'Central/Edge Temperature Evolution',
                xaxis: {title: 'Time (s)'},
                yaxis: {title: 'T (keV)'},
                showlegend: true
            });
            
            // Density evolution plot
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                const color = devices[dev].color;
                
                densityEvolutionData.push({
                    x: res.time,
                    y: res.n_central,
                    name: `${dev} (center)`,
                    mode: 'lines',
                    line: {color: color}
                });
                
                densityEvolutionData.push({
                    x: res.time,
                    y: res.n_edge,
                    name: `${dev} (edge)`,
                    mode: 'lines',
                    line: {color: color, dash: 'dash'}
                });
            });
            
            Plotly.newPlot('densityEvolutionPlot', densityEvolutionData, {
                title: 'Central/Edge Density Evolution',
                xaxis: {title: 'Time (s)'},
                yaxis: {title: 'n (m⁻³)'},
                showlegend: true
            });
            
            // Temperature profile plot
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                tempProfileData.push({
                    x: res.r,
                    y: res.T,
                    name: dev,
                    mode: 'lines',
                    line: {color: devices[dev].color}
                });
            });
            
            Plotly.newPlot('tempProfilePlot', tempProfileData, {
                title: 'Final Temperature Profile',
                xaxis: {title: 'r (m)'},
                yaxis: {title: 'T (keV)'},
                showlegend: true
            });
            
            // Density profile plot
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                densityProfileData.push({
                    x: res.r,
                    y: res.n,
                    name: dev,
                    mode: 'lines',
                    line: {color: devices[dev].color}
                });
            });
            
            Plotly.newPlot('densityProfilePlot', densityProfileData, {
                title: 'Final Density Profile',
                xaxis: {title: 'r (m)'},
                yaxis: {title: 'n (m⁻³)'},
                showlegend: true
            });
        }
        
        // Update plots
        function updatePlots() {
            // Update fusion power plot
            const showAvg = document.getElementById('showAvg').checked;
            const logScale = document.getElementById('logScale').checked;
            
            let fusionUpdate = [];
            let index = 0;
            
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                fusionUpdate.push({
                    x: [res.time],
                    y: [res.P_fusion_total]
                });
                
                // Update the average line visibility
                fusionUpdate.push({
                    x: [res.time],
                    y: [res.P_fusion_total],
                    visible: showAvg
                });
                
                index += 2;
            });
            
            Plotly.update('fusionPowerPlot', {
                x: fusionUpdate.map(u => u.x[0]),
                y: fusionUpdate.map(u => u.y[0])
            }, {}, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);
            
            // Update y-axis scale
            Plotly.relayout('fusionPowerPlot', {
                'yaxis.type': logScale ? 'log' : 'linear'
            });
            
            // Update other plots
            const tempEvoUpdate = [];
            const densityEvoUpdate = [];
            const tempProfileUpdate = [];
            const densityProfileUpdate = [];
            
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                
                // Temperature evolution
                tempEvoUpdate.push({
                    x: [res.time],
                    y: [res.T_central]
                });
                tempEvoUpdate.push({
                    x: [res.time],
                    y: [res.T_edge]
                });
                
                // Density evolution
                densityEvoUpdate.push({
                    x: [res.time],
                    y: [res.n_central]
                });
                densityEvoUpdate.push({
                    x: [res.time],
                    y: [res.n_edge]
                });
                
                // Profiles
                tempProfileUpdate.push({
                    x: [res.r],
                    y: [res.T]
                });
                densityProfileUpdate.push({
                    x: [res.r],
                    y: [res.n]
                });
            });
            
            // Apply updates
            Plotly.update('tempEvolutionPlot', {
                x: tempEvoUpdate.map(u => u.x[0]),
                y: tempEvoUpdate.map(u => u.y[0])
            });
            
            Plotly.update('densityEvolutionPlot', {
                x: densityEvoUpdate.map(u => u.x[0]),
                y: densityEvoUpdate.map(u => u.y[0])
            });
            
            Plotly.update('tempProfilePlot', {
                x: tempProfileUpdate.map(u => u.x[0]),
                y: tempProfileUpdate.map(u => u.y[0])
            });
            
            Plotly.update('densityProfilePlot', {
                x: densityProfileUpdate.map(u => u.x[0]),
                y: densityProfileUpdate.map(u => u.y[0])
            });
        }
        
        // Update device table
        function updateDeviceTable() {
            const tableBody = document.getElementById('deviceTableBody');
            tableBody.innerHTML = '';
            
            Object.keys(devices).forEach(dev => {
                const res = sims[dev].getResults();
                const color = devices[dev].color;
                
                // Calculate 10-second average
                const n_last = Math.floor(10 / sims[dev].dt);
                let avg_power;
                if (res.P_fusion_total.length > n_last) {
                    const lastValues = res.P_fusion_total.slice(-n_last);
                    avg_power = lastValues.reduce((sum, val) => sum + val, 0) / n_last;
                } else {
                    avg_power = res.P_fusion_total.reduce((sum, val) => sum + val, 0) / res.P_fusion_total.length;
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><span class="color-indicator" style="background-color:${color}"></span>${dev}</td>
                    <td>${res.P_fusion_total[res.P_fusion_total.length-1].toExponential(3)}</td>
                    <td>${avg_power.toExponential(3)}</td>
                    <td>${res.E_fusion_total[res.E_fusion_total.length-1].toExponential(3)}</td>
                `;
                tableBody.appendChild(row);
            });
        }
        
        // Create device cards
        function createDeviceCards() {
            const container = document.getElementById('deviceCards');
            container.innerHTML = '';
            
            Object.keys(devices).forEach(dev => {
                const params = devices[dev];
                const card = document.createElement('div');
                card.className = 'device-card';
                card.style.borderTopColor = params.color;
                
                let paramsHtml = '';
                Object.keys(params).forEach(key => {
                    if (key !== 'color') {
                        let value = params[key];
                        if (typeof value === 'number') {
                            if (value > 1000) {
                                value = value.toExponential(3);
                            } else if (Number.isInteger(value)) {
                                value = value.toLocaleString();
                            } else {
                                value = value.toFixed(3);
                            }
                        }
                        paramsHtml += `
                            <div class="param-row">
                                <span class="param-label">${key}:</span>
                                <span>${value}</span>
                            </div>
                        `;
                    }
                });
                
                card.innerHTML = `
                    <h3>${dev}</h3>
                    <div>${paramsHtml}</div>
                `;
                container.appendChild(card);
            });
        }
        
        // Tab switching
        function setupTabs() {
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');
            
            tabBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    // Remove active class from all tabs
                    tabBtns.forEach(b => b.classList.remove('active'));
                    tabContents.forEach(c => c.classList.remove('active'));
                    
                    // Add active class to clicked tab
                    btn.classList.add('active');
                    const tabId = btn.getAttribute('data-tab');
                    document.getElementById(tabId).classList.add('active');
                });
            });
        }
        
        // Simulation controls
        let simulationRunning = false;
        let simulationInterval;
        
        function setupControls() {
            document.getElementById('startBtn').addEventListener('click', () => {
                if (!simulationRunning) {
                    simulationRunning = true;
                    simulationInterval = setInterval(stepSimulation, 100);
                }
            });
            
            document.getElementById('pauseBtn').addEventListener('click', () => {
                simulationRunning = false;
                clearInterval(simulationInterval);
            });
            
            document.getElementById('resetBtn').addEventListener('click', () => {
                simulationRunning = false;
                clearInterval(simulationInterval);
                
                // Reset all simulations
                Object.keys(devices).forEach(dev => {
                    sims[dev] = new LiveSim(devices[dev]);
                });
                
                // Reset plots
                initPlots();
                updateDeviceTable();
            });
            
            // Add event listeners for checkboxes
            document.getElementById('showAvg').addEventListener('change', updatePlots);
            document.getElementById('logScale').addEventListener('change', updatePlots);
        }
        
        // Simulation step
        function stepSimulation() {
            Object.keys(sims).forEach(dev => {
                for (let i = 0; i < 5; i++) {
                    sims[dev].step();
                }
            });
            
            updatePlots();
            updateDeviceTable();
        }
        
        // Initialize the application
        function initApp() {
            initPlots();
            updateDeviceTable();
            createDeviceCards();
            setupTabs();
            setupControls();
        }
        
        // Start the application when the page loads
        window.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>
